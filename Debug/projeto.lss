
projeto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00000df6  00000e8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000df6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019c  0080022e  0080022e  00000eb8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001df7  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001309  00000000  00000000  00002ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8d  00000000  00000000  000041cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000972  00000000  00000000  00005294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd6  00000000  00000000  00005c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000067dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	54 c2       	rjmp	.+1192   	; 0x4fa <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	b4 c3       	rjmp	.+1896   	; 0x7ce <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ef       	ldi	r30, 0xF6	; 246
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	ae e2       	ldi	r26, 0x2E	; 46
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3c       	cpi	r26, 0xCA	; 202
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b6 d1       	rcall	.+876    	; 0x48c <main>
 120:	68 c6       	rjmp	.+3280   	; 0xdf2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <ADC_Init>:
        //(*adc_value) = adc_array[ch];
        return_value = 1;
    }

    return return_value;
}
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
 12a:	87 e8       	ldi	r24, 0x87	; 135
 12c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 130:	08 95       	ret

00000132 <ADC_SM>:

void ADC_SM(void)
{
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	64 97       	sbiw	r28, 0x14	; 20
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
    static uint8_t channel = 0;
    static adc_sm_status_t sm_state = CONFIG;

    switch (sm_state)
 14a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 14e:	88 23       	and	r24, r24
 150:	b1 f0       	breq	.+44     	; 0x17e <ADC_SM+0x4c>
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <ADC_SM+0x26>
 156:	51 c0       	rjmp	.+162    	; 0x1fa <ADC_SM+0xc8>
    {
        case CONFIG:
            if(channel < 7)
 158:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 15c:	87 30       	cpi	r24, 0x07	; 7
 15e:	38 f4       	brcc	.+14     	; 0x16e <ADC_SM+0x3c>
            {
                uint8_t ch = channel;

                ch &= 0b00000111; // AND operation with 7
                ADMUX = (ADMUX & 0xF8) | ch;
 160:	ec e7       	ldi	r30, 0x7C	; 124
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	98 7f       	andi	r25, 0xF8	; 248
 168:	87 70       	andi	r24, 0x07	; 7
 16a:	89 2b       	or	r24, r25
 16c:	80 83       	st	Z, r24
            }

            ADCSRA |= (1 << ADSC);
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24

            sm_state = READ;
 178:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
        break;
 17c:	41 c0       	rjmp	.+130    	; 0x200 <ADC_SM+0xce>

        case READ:
            if (0 == (ADCSRA & (1 << ADSC)))
 17e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 182:	86 fd       	sbrc	r24, 6
 184:	3d c0       	rjmp	.+122    	; 0x200 <ADC_SM+0xce>
            {
				adc_array[channel] = (uint16_t)(ADCW);
 186:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 18a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
 18e:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 192:	e8 2f       	mov	r30, r24
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	e1 5d       	subi	r30, 0xD1	; 209
 19c:	fd 4f       	sbci	r31, 0xFD	; 253
 19e:	31 83       	std	Z+1, r19	; 0x01
 1a0:	20 83       	st	Z, r18

                char  buffer[20];
                if(0 == channel)
 1a2:	81 11       	cpse	r24, r1
 1a4:	1c c0       	rjmp	.+56     	; 0x1de <ADC_SM+0xac>
                {
                    sprintf(buffer,  "ADC0  %4d", adc_array[0]);
 1a6:	ef e2       	ldi	r30, 0x2F	; 47
 1a8:	f2 e0       	ldi	r31, 0x02	; 2
 1aa:	81 81       	ldd	r24, Z+1	; 0x01
 1ac:	8f 93       	push	r24
 1ae:	80 81       	ld	r24, Z
 1b0:	8f 93       	push	r24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	92 e0       	ldi	r25, 0x02	; 2
 1b6:	9f 93       	push	r25
 1b8:	8f 93       	push	r24
 1ba:	8e 01       	movw	r16, r28
 1bc:	0f 5f       	subi	r16, 0xFF	; 255
 1be:	1f 4f       	sbci	r17, 0xFF	; 255
 1c0:	1f 93       	push	r17
 1c2:	0f 93       	push	r16
 1c4:	3b d3       	rcall	.+1654   	; 0x83c <sprintf>
                    DisplayLCD_Out(1, 1, (unsigned char *)buffer);
 1c6:	a8 01       	movw	r20, r16
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	44 d1       	rcall	.+648    	; 0x45a <DisplayLCD_Out>
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
                }

                channel++;
 1de:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 1e2:	8f 5f       	subi	r24, 0xFF	; 255

                if (7 < channel)
 1e4:	88 30       	cpi	r24, 0x08	; 8
 1e6:	18 f4       	brcc	.+6      	; 0x1ee <ADC_SM+0xbc>
                {
                    sprintf(buffer,  "ADC0  %4d", adc_array[0]);
                    DisplayLCD_Out(1, 1, (unsigned char *)buffer);
                }

                channel++;
 1e8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <ADC_SM+0xc0>

                if (7 < channel)
                {
                    channel = 0;
 1ee:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <__data_end>
                }

                sm_state = CONFIG;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 1f8:	03 c0       	rjmp	.+6      	; 0x200 <ADC_SM+0xce>
            }
        break;  

        default:
            sm_state = CONFIG;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
        break;
    }
 200:	64 96       	adiw	r28, 0x14	; 20
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <CRC16_Start>:

static uint16_t crc16 = 0;

void CRC16_Start()
{
    crc16 = 0;
 216:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <crc16+0x1>
 21a:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <crc16>
 21e:	08 95       	ret

00000220 <Calc_CRC16_Byte>:
    task_state_t result = RUNNING;

    static uint8_t j = 0;
    uint16_t test = 0;

    test = ((uint16_t)byte) << (j + 8);
 220:	40 91 51 02 	lds	r20, 0x0251	; 0x800251 <j.1827>
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	28 e0       	ldi	r18, 0x08	; 8
 228:	24 0f       	add	r18, r20
 22a:	02 c0       	rjmp	.+4      	; 0x230 <Calc_CRC16_Byte+0x10>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	2a 95       	dec	r18
 232:	e2 f7       	brpl	.-8      	; 0x22c <Calc_CRC16_Byte+0xc>
    test ^= crc16;
 234:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <crc16>
 238:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <crc16+0x1>
 23c:	82 27       	eor	r24, r18
 23e:	93 27       	eor	r25, r19
    test &= 0x8000;

    if (test)
 240:	99 23       	and	r25, r25
 242:	5c f4       	brge	.+22     	; 0x25a <Calc_CRC16_Byte+0x3a>
    {
        crc16 = (uint16_t)(crc16 << 1);
        crc16 = (uint16_t)(crc16 ^ 0x1021);
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	81 e2       	ldi	r24, 0x21	; 33
 24a:	28 27       	eor	r18, r24
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	38 27       	eor	r19, r24
 250:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <crc16+0x1>
 254:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <crc16>
 258:	06 c0       	rjmp	.+12     	; 0x266 <Calc_CRC16_Byte+0x46>
    }
    else
    {
        crc16 = (uint16_t)(crc16 << 1);
 25a:	22 0f       	add	r18, r18
 25c:	33 1f       	adc	r19, r19
 25e:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <crc16+0x1>
 262:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <crc16>
    }

    j++;
 266:	4f 5f       	subi	r20, 0xFF	; 255

    if(j >= 8)
 268:	48 30       	cpi	r20, 0x08	; 8
 26a:	20 f4       	brcc	.+8      	; 0x274 <Calc_CRC16_Byte+0x54>
    else
    {
        crc16 = (uint16_t)(crc16 << 1);
    }

    j++;
 26c:	40 93 51 02 	sts	0x0251, r20	; 0x800251 <j.1827>
    crc16 = 0;
}

task_state_t Calc_CRC16_Byte(uint8_t byte)
{
    task_state_t result = RUNNING;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
    j++;

    if(j >= 8)
    {
        result = FINISHED;
        j = 0;
 274:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <j.1827>

    j++;

    if(j >= 8)
    {
        result = FINISHED;
 278:	82 e0       	ldi	r24, 0x02	; 2
        j = 0;
    }

    return result;
}
 27a:	08 95       	ret

0000027c <Calc_CRC16_Array>:

task_state_t Calc_CRC16_Array(uint8_t* array, uint16_t size, uint16_t* result)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
    task_state_t tsk_result = RUNNING;
    static uint16_t index = 0;

    if(index < size)
 280:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <index.1835>
 284:	d0 91 50 02 	lds	r29, 0x0250	; 0x800250 <index.1835+0x1>
 288:	c6 17       	cp	r28, r22
 28a:	d7 07       	cpc	r29, r23
 28c:	70 f4       	brcc	.+28     	; 0x2aa <Calc_CRC16_Array+0x2e>
    {
        task_state_t crc_byte_calc = Calc_CRC16_Byte(array[index]);
 28e:	fc 01       	movw	r30, r24
 290:	ec 0f       	add	r30, r28
 292:	fd 1f       	adc	r31, r29
 294:	80 81       	ld	r24, Z
 296:	c4 df       	rcall	.-120    	; 0x220 <Calc_CRC16_Byte>
        
        if(FINISHED == crc_byte_calc)
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	a1 f4       	brne	.+40     	; 0x2c4 <Calc_CRC16_Array+0x48>
        {
            index++;
 29c:	21 96       	adiw	r28, 0x01	; 1
 29e:	d0 93 50 02 	sts	0x0250, r29	; 0x800250 <index.1835+0x1>
 2a2:	c0 93 4f 02 	sts	0x024F, r28	; 0x80024f <index.1835>
    return result;
}

task_state_t Calc_CRC16_Array(uint8_t* array, uint16_t size, uint16_t* result)
{
    task_state_t tsk_result = RUNNING;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e c0       	rjmp	.+28     	; 0x2c6 <Calc_CRC16_Array+0x4a>
            index++;
        }
    }
    else
    {
        index = 0;
 2aa:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <index.1835+0x1>
 2ae:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <index.1835>
        tsk_result = FINISHED;
        *result = crc16;
 2b2:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <crc16>
 2b6:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <crc16+0x1>
 2ba:	fa 01       	movw	r30, r20
 2bc:	91 83       	std	Z+1, r25	; 0x01
 2be:	80 83       	st	Z, r24
        }
    }
    else
    {
        index = 0;
        tsk_result = FINISHED;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <Calc_CRC16_Array+0x4a>
    return result;
}

task_state_t Calc_CRC16_Array(uint8_t* array, uint16_t size, uint16_t* result)
{
    task_state_t tsk_result = RUNNING;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
        tsk_result = FINISHED;
        *result = crc16;
    }

    return tsk_result;
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <LCD_Enable>:
    LCD_Write_Data(0, CmdLCD); //RS = 0, -> COMANDO A SER PROCESSADO
}

void DisplayLCD_Chr_Cp(unsigned char Tchar)
{
    LCD_Write_Data(1, Tchar); //RS = 1 -> DADO A SER ESCRITO
 2cc:	8d e0       	ldi	r24, 0x0D	; 13
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <LCD_Enable+0x2>
 2d2:	00 00       	nop
 2d4:	e2 e0       	ldi	r30, 0x02	; 2
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	80 81       	ld	r24, Z
 2da:	80 64       	ori	r24, 0x40	; 64
 2dc:	80 83       	st	Z, r24
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <LCD_Enable+0x14>
 2e4:	00 00       	nop
 2e6:	80 81       	ld	r24, Z
 2e8:	8f 7b       	andi	r24, 0xBF	; 191
 2ea:	80 83       	st	Z, r24
 2ec:	8d e0       	ldi	r24, 0x0D	; 13
 2ee:	8a 95       	dec	r24
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_Enable+0x22>
 2f2:	00 00       	nop
 2f4:	08 95       	ret

000002f6 <LCD_Write_Data>:
 2f6:	0f 93       	push	r16
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	c6 2f       	mov	r28, r22
 2fe:	02 e0       	ldi	r16, 0x02	; 2
 300:	11 e0       	ldi	r17, 0x01	; 1
 302:	f8 01       	movw	r30, r16
 304:	90 81       	ld	r25, Z
 306:	80 fb       	bst	r24, 0
 308:	95 f9       	bld	r25, 5
 30a:	90 83       	st	Z, r25
 30c:	83 ef       	ldi	r24, 0xF3	; 243
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <LCD_Write_Data+0x1a>
 314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_Write_Data+0x20>
 316:	00 00       	nop
 318:	64 fb       	bst	r22, 4
 31a:	88 27       	eor	r24, r24
 31c:	80 f9       	bld	r24, 0
 31e:	80 fd       	sbrc	r24, 0
 320:	a5 9a       	sbi	0x14, 5	; 20
 322:	80 ff       	sbrs	r24, 0
 324:	a5 98       	cbi	0x14, 5	; 20
 326:	65 fb       	bst	r22, 5
 328:	88 27       	eor	r24, r24
 32a:	80 f9       	bld	r24, 0
 32c:	80 fd       	sbrc	r24, 0
 32e:	73 9a       	sbi	0x0e, 3	; 14
 330:	80 ff       	sbrs	r24, 0
 332:	73 98       	cbi	0x0e, 3	; 14
 334:	66 fb       	bst	r22, 6
 336:	99 27       	eor	r25, r25
 338:	90 f9       	bld	r25, 0
 33a:	80 81       	ld	r24, Z
 33c:	90 fb       	bst	r25, 0
 33e:	83 f9       	bld	r24, 3
 340:	80 83       	st	Z, r24
 342:	96 2f       	mov	r25, r22
 344:	99 1f       	adc	r25, r25
 346:	99 27       	eor	r25, r25
 348:	99 1f       	adc	r25, r25
 34a:	80 81       	ld	r24, Z
 34c:	90 fb       	bst	r25, 0
 34e:	84 f9       	bld	r24, 4
 350:	80 83       	st	Z, r24
 352:	bc df       	rcall	.-136    	; 0x2cc <LCD_Enable>
 354:	c2 95       	swap	r28
 356:	c0 7f       	andi	r28, 0xF0	; 240
 358:	c4 fb       	bst	r28, 4
 35a:	88 27       	eor	r24, r24
 35c:	80 f9       	bld	r24, 0
 35e:	80 fd       	sbrc	r24, 0
 360:	a5 9a       	sbi	0x14, 5	; 20
 362:	80 ff       	sbrs	r24, 0
 364:	a5 98       	cbi	0x14, 5	; 20
 366:	c5 fb       	bst	r28, 5
 368:	88 27       	eor	r24, r24
 36a:	80 f9       	bld	r24, 0
 36c:	80 fd       	sbrc	r24, 0
 36e:	73 9a       	sbi	0x0e, 3	; 14
 370:	80 ff       	sbrs	r24, 0
 372:	73 98       	cbi	0x0e, 3	; 14
 374:	c6 fb       	bst	r28, 6
 376:	99 27       	eor	r25, r25
 378:	90 f9       	bld	r25, 0
 37a:	f8 01       	movw	r30, r16
 37c:	80 81       	ld	r24, Z
 37e:	90 fb       	bst	r25, 0
 380:	83 f9       	bld	r24, 3
 382:	80 83       	st	Z, r24
 384:	cc 1f       	adc	r28, r28
 386:	cc 27       	eor	r28, r28
 388:	cc 1f       	adc	r28, r28
 38a:	80 81       	ld	r24, Z
 38c:	c0 fb       	bst	r28, 0
 38e:	84 f9       	bld	r24, 4
 390:	80 83       	st	Z, r24
 392:	9c df       	rcall	.-200    	; 0x2cc <LCD_Enable>
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <DisplayLCD_Cmd>:
 39c:	68 2f       	mov	r22, r24
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	aa cf       	rjmp	.-172    	; 0x2f6 <LCD_Write_Data>
 3a2:	08 95       	ret

000003a4 <DisplayLCD_Init>:

//fun��es
void DisplayLCD_Init()
{

    LCD_DATA4_TRIS = 1;
 3a4:	9d 9a       	sbi	0x13, 5	; 19
    LCD_DATA4_IO = 0;
 3a6:	a5 98       	cbi	0x14, 5	; 20
    LCD_DATA5_TRIS = 1;
 3a8:	6b 9a       	sbi	0x0d, 3	; 13
    LCD_DATA5_IO = 0;
 3aa:	73 98       	cbi	0x0e, 3	; 14
    LCD_DATA6_TRIS = 1;
 3ac:	a1 e0       	ldi	r26, 0x01	; 1
 3ae:	b1 e0       	ldi	r27, 0x01	; 1
 3b0:	8c 91       	ld	r24, X
 3b2:	88 60       	ori	r24, 0x08	; 8
 3b4:	8c 93       	st	X, r24
    LCD_DATA6_IO = 0;
 3b6:	e2 e0       	ldi	r30, 0x02	; 2
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	80 81       	ld	r24, Z
 3bc:	87 7f       	andi	r24, 0xF7	; 247
 3be:	80 83       	st	Z, r24
    LCD_DATA7_TRIS = 1;
 3c0:	8c 91       	ld	r24, X
 3c2:	80 61       	ori	r24, 0x10	; 16
 3c4:	8c 93       	st	X, r24
    LCD_DATA7_IO = 0;
 3c6:	80 81       	ld	r24, Z
 3c8:	8f 7e       	andi	r24, 0xEF	; 239
 3ca:	80 83       	st	Z, r24
    LCD_EN_TRIS = 1;
 3cc:	8c 91       	ld	r24, X
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	8c 93       	st	X, r24
    LCD_RS_IO = 0;
 3d2:	80 81       	ld	r24, Z
 3d4:	8f 7d       	andi	r24, 0xDF	; 223
 3d6:	80 83       	st	Z, r24
    LCD_RS_TRIS = 1;
 3d8:	8c 91       	ld	r24, X
 3da:	80 62       	ori	r24, 0x20	; 32
 3dc:	8c 93       	st	X, r24
    LCD_RS_IO = 0;
 3de:	80 81       	ld	r24, Z
 3e0:	8f 7d       	andi	r24, 0xDF	; 223
 3e2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e4:	87 ea       	ldi	r24, 0xA7	; 167
 3e6:	91 e6       	ldi	r25, 0x61	; 97
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <DisplayLCD_Init+0x44>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <DisplayLCD_Init+0x4a>
 3ee:	00 00       	nop

    _delay_ms(100); //Tempo necess�rio para inicializa��o do LCD ap�s power-on

    LCD_DATA4_IO = 1;
 3f0:	a5 9a       	sbi	0x14, 5	; 20
    LCD_DATA5_IO = 1;
 3f2:	73 9a       	sbi	0x0e, 3	; 14
    LCD_Enable();
 3f4:	6b df       	rcall	.-298    	; 0x2cc <LCD_Enable>
    LCD_Enable();
 3f6:	6a df       	rcall	.-300    	; 0x2cc <LCD_Enable>
    LCD_Enable();
 3f8:	69 df       	rcall	.-302    	; 0x2cc <LCD_Enable>
 3fa:	89 ef       	ldi	r24, 0xF9	; 249
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <DisplayLCD_Init+0x5a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop

    _delay_ms(1);

    LCD_DATA4_IO = 0;
    LCD_DATA5_IO = 1;
    LCD_Enable();
 406:	a5 98       	cbi	0x14, 5	; 20
 408:	73 9a       	sbi	0x0e, 3	; 14
    LCD_Enable();
 40a:	60 df       	rcall	.-320    	; 0x2cc <LCD_Enable>
 40c:	5f df       	rcall	.-322    	; 0x2cc <LCD_Enable>
    LCD_Enable();
 40e:	5e df       	rcall	.-324    	; 0x2cc <LCD_Enable>
 410:	89 ef       	ldi	r24, 0xF9	; 249
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

    _delay_ms(1);

    DisplayLCD_Cmd(0X28); //2X linhas 7x5 em modo 4bits
 41a:	00 00       	nop
 41c:	88 e2       	ldi	r24, 0x28	; 40
    DisplayLCD_Cmd(0X0C);
 41e:	be df       	rcall	.-132    	; 0x39c <DisplayLCD_Cmd>
 420:	8c e0       	ldi	r24, 0x0C	; 12
 422:	bc df       	rcall	.-136    	; 0x39c <DisplayLCD_Cmd>
    DisplayLCD_Cmd(0X06);
 424:	86 e0       	ldi	r24, 0x06	; 6
 426:	ba df       	rcall	.-140    	; 0x39c <DisplayLCD_Cmd>
 428:	81 e0       	ldi	r24, 0x01	; 1
    DisplayLCD_Cmd(0X01);
 42a:	b8 df       	rcall	.-144    	; 0x39c <DisplayLCD_Cmd>
 42c:	87 ea       	ldi	r24, 0xA7	; 167
 42e:	91 e6       	ldi	r25, 0x61	; 97
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 436:	00 00       	nop
 438:	08 95       	ret

0000043a <DisplayLCD_Out_Cp>:
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29

//DisplayLCD_Out_Cp("BOM DIA");
void DisplayLCD_Out_Cp(unsigned char *texto_lcd)
{
    // LCD_RS_IO = 1;  //ESCREVER UM DADO
    while (*texto_lcd) //loop at� encontrar o caractere NULL (ZERO)
 43e:	fc 01       	movw	r30, r24
 440:	60 81       	ld	r22, Z
 442:	66 23       	and	r22, r22
 444:	39 f0       	breq	.+14     	; 0x454 <DisplayLCD_Out_Cp+0x1a>
 446:	ec 01       	movw	r28, r24
 448:	21 96       	adiw	r28, 0x01	; 1
    {
        LCD_Write_Data(1, *texto_lcd); //RS =1, ESCREVENDO NO LCD
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	54 df       	rcall	.-344    	; 0x2f6 <LCD_Write_Data>

//DisplayLCD_Out_Cp("BOM DIA");
void DisplayLCD_Out_Cp(unsigned char *texto_lcd)
{
    // LCD_RS_IO = 1;  //ESCREVER UM DADO
    while (*texto_lcd) //loop at� encontrar o caractere NULL (ZERO)
 44e:	69 91       	ld	r22, Y+
 450:	61 11       	cpse	r22, r1
 452:	fb cf       	rjmp	.-10     	; 0x44a <DisplayLCD_Out_Cp+0x10>
    {
        LCD_Write_Data(1, *texto_lcd); //RS =1, ESCREVENDO NO LCD
        //LCD_Enable();
        ++texto_lcd;
    }
}
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <DisplayLCD_Out>:
}

//DisplayLCD_Out(1,2, "BOM DIA");
void DisplayLCD_Out(unsigned char Linha, unsigned char Coluna, \
	unsigned char *TextoLCD)
{
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ea 01       	movw	r28, r20
    LCD_RS_IO = 0; //TRATAR PRIMEIRO AS COORDENADAS X E Y
 460:	e2 e0       	ldi	r30, 0x02	; 2
 462:	f1 e0       	ldi	r31, 0x01	; 1
 464:	90 81       	ld	r25, Z
 466:	9f 7d       	andi	r25, 0xDF	; 223
 468:	90 83       	st	Z, r25
    switch (Linha)
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	19 f0       	breq	.+6      	; 0x474 <DisplayLCD_Out+0x1a>
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	29 f0       	breq	.+10     	; 0x47c <DisplayLCD_Out+0x22>
 472:	07 c0       	rjmp	.+14     	; 0x482 <DisplayLCD_Out+0x28>
    {
        case 1:
            Coluna = Coluna + 0X7F;     /* 2 + 0X7F = 0X81 */
            LCD_Write_Data(0, Coluna);  /* Comando, visto que estamos 
 474:	61 58       	subi	r22, 0x81	; 129
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	3e df       	rcall	.-388    	; 0x2f6 <LCD_Write_Data>
            posicionando o cursor */
        break;
 47a:	03 c0       	rjmp	.+6      	; 0x482 <DisplayLCD_Out+0x28>
        
        case 2:
            Coluna = Coluna + 0xBF; //2 + 0xBF = 0XC1
            LCD_Write_Data(0, Coluna);
 47c:	61 54       	subi	r22, 0x41	; 65
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	3a df       	rcall	.-396    	; 0x2f6 <LCD_Write_Data>
            
        break;
    }

    DisplayLCD_Out_Cp(TextoLCD); //Escreve no LCD "BOM DIA"
 482:	ce 01       	movw	r24, r28
 484:	da df       	rcall	.-76     	; 0x43a <DisplayLCD_Out_Cp>
 486:	df 91       	pop	r29
}
 488:	cf 91       	pop	r28
 48a:	08 95       	ret

0000048c <main>:
 48c:	25 d0       	rcall	.+74     	; 0x4d8 <Timer_Init>
#include "timers.h"

int main(void)
{
	Timer_Init();
    USART_Init();
 48e:	b1 d0       	rcall	.+354    	; 0x5f2 <USART_Init>
    USART_rxIE();
 490:	e9 d0       	rcall	.+466    	; 0x664 <USART_rxIE>
    
	sei();
 492:	78 94       	sei

    ADC_Init();
 494:	47 de       	rcall	.-882    	; 0x124 <ADC_Init>
 496:	86 df       	rcall	.-244    	; 0x3a4 <DisplayLCD_Init>
    DisplayLCD_Init();
 498:	4b e0       	ldi	r20, 0x0B	; 11
    
    DisplayLCD_Out(1,1, (unsigned char *)"TESTE lcd");
 49a:	52 e0       	ldi	r21, 0x02	; 2
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	dc df       	rcall	.-72     	; 0x45a <DisplayLCD_Out>
 4a2:	45 e1       	ldi	r20, 0x15	; 21
    DisplayLCD_Out(2,0, (unsigned char *)"BOM DIA");
 4a4:	52 e0       	ldi	r21, 0x02	; 2
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	d7 df       	rcall	.-82     	; 0x45a <DisplayLCD_Out>
 4ac:	2f ef       	ldi	r18, 0xFF	; 255
 4ae:	83 ed       	ldi	r24, 0xD3	; 211
 4b0:	90 e3       	ldi	r25, 0x30	; 48
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	80 40       	sbci	r24, 0x00	; 0
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <main+0x26>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <main+0x30>
 4bc:	00 00       	nop
 4be:	8d e1       	ldi	r24, 0x1D	; 29
    _delay_ms(1000);
    
    while(FINISHED != USART_StrTx((const char *)"Teste\n"));
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	b0 d0       	rcall	.+352    	; 0x624 <USART_StrTx>
 4c4:	82 30       	cpi	r24, 0x02	; 2
 4c6:	d9 f7       	brne	.-10     	; 0x4be <main+0x32>
	while(FINISHED != USART_StrTx((const char *)"ola\n"));
 4c8:	84 e2       	ldi	r24, 0x24	; 36
 4ca:	92 e0       	ldi	r25, 0x02	; 2
 4cc:	ab d0       	rcall	.+342    	; 0x624 <USART_StrTx>
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	d9 f7       	brne	.-10     	; 0x4c8 <main+0x3c>
 4d2:	ce d0       	rcall	.+412    	; 0x670 <USART_SM>

    while (1) 
    {
		USART_SM();
 4d4:	2e de       	rcall	.-932    	; 0x132 <ADC_SM>
 4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <main+0x46>

000004d8 <Timer_Init>:
        ADC_SM();
 4d8:	e1 e8       	ldi	r30, 0x81	; 129
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
}

uint16_t Get_Timer_Count_Register(void)
{
    return TCNT1;
}
 4de:	81 60       	ori	r24, 0x01	; 1
 4e0:	80 83       	st	Z, r24
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	91 ec       	ldi	r25, 0xC1	; 193
 4e6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 4ea:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 4ee:	ef e6       	ldi	r30, 0x6F	; 111
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	81 60       	ori	r24, 0x01	; 1
 4f6:	80 83       	st	Z, r24
 4f8:	08 95       	ret

000004fa <__vector_20>:

ISR(TIMER1_OVF_vect)
{
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
    timer_count++;
 516:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <timer_count>
 51a:	30 91 55 02 	lds	r19, 0x0255	; 0x800255 <timer_count+0x1>
 51e:	40 91 56 02 	lds	r20, 0x0256	; 0x800256 <timer_count+0x2>
 522:	50 91 57 02 	lds	r21, 0x0257	; 0x800257 <timer_count+0x3>
 526:	60 91 58 02 	lds	r22, 0x0258	; 0x800258 <timer_count+0x4>
 52a:	70 91 59 02 	lds	r23, 0x0259	; 0x800259 <timer_count+0x5>
 52e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <timer_count+0x6>
 532:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <timer_count+0x7>
 536:	a1 e0       	ldi	r26, 0x01	; 1
 538:	75 d1       	rcall	.+746    	; 0x824 <__adddi3_s8>
 53a:	20 93 54 02 	sts	0x0254, r18	; 0x800254 <timer_count>
 53e:	30 93 55 02 	sts	0x0255, r19	; 0x800255 <timer_count+0x1>
 542:	40 93 56 02 	sts	0x0256, r20	; 0x800256 <timer_count+0x2>
 546:	50 93 57 02 	sts	0x0257, r21	; 0x800257 <timer_count+0x3>
 54a:	60 93 58 02 	sts	0x0258, r22	; 0x800258 <timer_count+0x4>
 54e:	70 93 59 02 	sts	0x0259, r23	; 0x800259 <timer_count+0x5>
 552:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <timer_count+0x6>
 556:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <timer_count+0x7>
    TCNT1 = 0xC180;
 55a:	80 e8       	ldi	r24, 0x80	; 128
 55c:	91 ec       	ldi	r25, 0xC1	; 193
 55e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
 562:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
 566:	af 91       	pop	r26
 568:	9f 91       	pop	r25
 56a:	8f 91       	pop	r24
 56c:	7f 91       	pop	r23
 56e:	6f 91       	pop	r22
 570:	5f 91       	pop	r21
 572:	4f 91       	pop	r20
 574:	3f 91       	pop	r19
 576:	2f 91       	pop	r18
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <Buffer_Add_Data>:
}

unsigned char USART_Receive()
{
    return UDR0;
}
 582:	fc 01       	movw	r30, r24
 584:	f3 95       	inc	r31
 586:	20 81       	ld	r18, Z
 588:	31 81       	ldd	r19, Z+1	; 0x01
 58a:	2f 5f       	subi	r18, 0xFF	; 255
 58c:	3f 4f       	sbci	r19, 0xFF	; 255
 58e:	33 27       	eor	r19, r19
 590:	32 96       	adiw	r30, 0x02	; 2
 592:	40 81       	ld	r20, Z
 594:	51 81       	ldd	r21, Z+1	; 0x01
 596:	24 17       	cp	r18, r20
 598:	35 07       	cpc	r19, r21
 59a:	59 f0       	breq	.+22     	; 0x5b2 <Buffer_Add_Data+0x30>
 59c:	32 97       	sbiw	r30, 0x02	; 2
 59e:	40 81       	ld	r20, Z
 5a0:	51 81       	ldd	r21, Z+1	; 0x01
 5a2:	dc 01       	movw	r26, r24
 5a4:	a4 0f       	add	r26, r20
 5a6:	b5 1f       	adc	r27, r21
 5a8:	6c 93       	st	X, r22
 5aa:	31 83       	std	Z+1, r19	; 0x01
 5ac:	20 83       	st	Z, r18
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	08 95       	ret
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	08 95       	ret

000005b6 <Buffer_Read>:
 5b6:	fc 01       	movw	r30, r24
 5b8:	ee 5f       	subi	r30, 0xFE	; 254
 5ba:	fe 4f       	sbci	r31, 0xFE	; 254
 5bc:	40 81       	ld	r20, Z
 5be:	51 81       	ldd	r21, Z+1	; 0x01
 5c0:	32 97       	sbiw	r30, 0x02	; 2
 5c2:	20 81       	ld	r18, Z
 5c4:	31 81       	ldd	r19, Z+1	; 0x01
 5c6:	42 17       	cp	r20, r18
 5c8:	53 07       	cpc	r21, r19
 5ca:	89 f0       	breq	.+34     	; 0x5ee <Buffer_Read+0x38>
 5cc:	32 96       	adiw	r30, 0x02	; 2
 5ce:	20 81       	ld	r18, Z
 5d0:	31 81       	ldd	r19, Z+1	; 0x01
 5d2:	dc 01       	movw	r26, r24
 5d4:	a2 0f       	add	r26, r18
 5d6:	b3 1f       	adc	r27, r19
 5d8:	8c 91       	ld	r24, X
 5da:	db 01       	movw	r26, r22
 5dc:	8c 93       	st	X, r24
 5de:	80 81       	ld	r24, Z
 5e0:	91 81       	ldd	r25, Z+1	; 0x01
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	99 27       	eor	r25, r25
 5e6:	91 83       	std	Z+1, r25	; 0x01
 5e8:	80 83       	st	Z, r24
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	08 95       	ret
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret

000005f2 <USART_Init>:
 5f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 5f6:	87 e6       	ldi	r24, 0x67	; 103
 5f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 5fc:	88 e1       	ldi	r24, 0x18	; 24
 5fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 602:	86 e0       	ldi	r24, 0x06	; 6
 604:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 608:	e0 ec       	ldi	r30, 0xC0	; 192
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	8f 7d       	andi	r24, 0xDF	; 223
 610:	80 83       	st	Z, r24
 612:	08 95       	ret

00000614 <USART_Transmit>:
 614:	e0 ec       	ldi	r30, 0xC0	; 192
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	90 81       	ld	r25, Z
 61a:	95 ff       	sbrs	r25, 5
 61c:	fd cf       	rjmp	.-6      	; 0x618 <USART_Transmit+0x4>
 61e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 622:	08 95       	ret

00000624 <USART_StrTx>:
{
    static uint16_t i = 0;
    task_state_t state = IDLE;

    /*  checa se terminou de transmitir o ultimo byte */
    if ((UCSR0A & (1 << UDRE0)))
 624:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 628:	25 ff       	sbrs	r18, 5
 62a:	1a c0       	rjmp	.+52     	; 0x660 <USART_StrTx+0x3c>
    {
        /*  checa se chegou no final da string */
        if ('\0' != ptr[i])
 62c:	20 91 c4 02 	lds	r18, 0x02C4	; 0x8002c4 <i.1799>
 630:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <i.1799+0x1>
 634:	fc 01       	movw	r30, r24
 636:	e2 0f       	add	r30, r18
 638:	f3 1f       	adc	r31, r19
 63a:	80 81       	ld	r24, Z
 63c:	88 23       	and	r24, r24
 63e:	51 f0       	breq	.+20     	; 0x654 <USART_StrTx+0x30>
        {
            UDR0 = ptr[i++];
 640:	2f 5f       	subi	r18, 0xFF	; 255
 642:	3f 4f       	sbci	r19, 0xFF	; 255
 644:	30 93 c5 02 	sts	0x02C5, r19	; 0x8002c5 <i.1799+0x1>
 648:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <i.1799>
 64c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
            state = RUNNING;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	08 95       	ret
        }
        else
        {
            i = 0;
 654:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <i.1799+0x1>
 658:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <i.1799>
            state = FINISHED;
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	08 95       	ret
}

task_state_t USART_StrTx(const char *ptr)
{
    static uint16_t i = 0;
    task_state_t state = IDLE;
 660:	80 e0       	ldi	r24, 0x00	; 0
            state = FINISHED;
        }
    }

    return state;
}
 662:	08 95       	ret

00000664 <USART_rxIE>:

void USART_rxIE()
{
    UCSR0B |= (1 << RXCIE0);
 664:	e1 ec       	ldi	r30, 0xC1	; 193
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	80 68       	ori	r24, 0x80	; 128
 66c:	80 83       	st	Z, r24
 66e:	08 95       	ret

00000670 <USART_SM>:
}

void USART_SM(void)
{
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	00 d0       	rcall	.+0      	; 0x678 <USART_SM+0x8>
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
    static usart_sm_status_t status_sm_rx = READ;
    static uint8_t internal_buffer[100];
    static uint8_t buffer_index = 0;
    static uint8_t index_aux = 0;
    static uint8_t flag_escape = 0;
    uint8_t rd = 0;
 67c:	19 82       	std	Y+1, r1	; 0x01
    uint16_t crc_calc = 0;
 67e:	1b 82       	std	Y+3, r1	; 0x03
 680:	1a 82       	std	Y+2, r1	; 0x02
    
    switch(status_sm_rx)
 682:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <status_sm_rx.1806>
 686:	81 30       	cpi	r24, 0x01	; 1
 688:	09 f4       	brne	.+2      	; 0x68c <USART_SM+0x1c>
 68a:	52 c0       	rjmp	.+164    	; 0x730 <USART_SM+0xc0>
 68c:	20 f0       	brcs	.+8      	; 0x696 <USART_SM+0x26>
 68e:	82 30       	cpi	r24, 0x02	; 2
 690:	09 f4       	brne	.+2      	; 0x694 <USART_SM+0x24>
 692:	7e c0       	rjmp	.+252    	; 0x790 <USART_SM+0x120>
 694:	93 c0       	rjmp	.+294    	; 0x7bc <USART_SM+0x14c>
    {
        case READ:
            if (BUFFER_OK == Buffer_Read(&buffer, &rd))
 696:	be 01       	movw	r22, r28
 698:	6f 5f       	subi	r22, 0xFF	; 255
 69a:	7f 4f       	sbci	r23, 0xFF	; 255
 69c:	86 ec       	ldi	r24, 0xC6	; 198
 69e:	92 e0       	ldi	r25, 0x02	; 2
 6a0:	8a df       	rcall	.-236    	; 0x5b6 <Buffer_Read>
 6a2:	81 30       	cpi	r24, 0x01	; 1
 6a4:	09 f0       	breq	.+2      	; 0x6a8 <USART_SM+0x38>
 6a6:	8c c0       	rjmp	.+280    	; 0x7c0 <USART_SM+0x150>
            {
				//USART_Transmit(rd);
                switch(rd)
 6a8:	89 81       	ldd	r24, Y+1	; 0x01
 6aa:	8c 37       	cpi	r24, 0x7C	; 124
 6ac:	b9 f0       	breq	.+46     	; 0x6dc <USART_SM+0x6c>
 6ae:	87 3c       	cpi	r24, 0xC7	; 199
 6b0:	19 f0       	breq	.+6      	; 0x6b8 <USART_SM+0x48>
 6b2:	87 37       	cpi	r24, 0x77	; 119
 6b4:	31 f5       	brne	.+76     	; 0x702 <USART_SM+0x92>
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <USART_SM+0x5a>
                {
                    case SOF:
                        buffer_index = 0;
                        internal_buffer[buffer_index++] = rd;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <buffer_index.1808>
 6be:	87 ec       	ldi	r24, 0xC7	; 199
 6c0:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <internal_buffer.1807>
                        flag_escape = 0;
 6c4:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <flag_escape.1810>
                    break;
 6c8:	7b c0       	rjmp	.+246    	; 0x7c0 <USART_SM+0x150>

                    case ESC:
                        if (0 < buffer_index)
 6ca:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer_index.1808>
 6ce:	88 23       	and	r24, r24
 6d0:	09 f4       	brne	.+2      	; 0x6d4 <USART_SM+0x64>
 6d2:	76 c0       	rjmp	.+236    	; 0x7c0 <USART_SM+0x150>
                        {
                            flag_escape = 1;
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <flag_escape.1810>
 6da:	72 c0       	rjmp	.+228    	; 0x7c0 <USART_SM+0x150>
                        }
                    break;

                    case EOF:        
                        if (0 < buffer_index)
 6dc:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <buffer_index.1808>
 6e0:	ee 23       	and	r30, r30
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <USART_SM+0x76>
 6e4:	6d c0       	rjmp	.+218    	; 0x7c0 <USART_SM+0x150>
                        {                
                            internal_buffer[buffer_index++] = rd;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	8e 0f       	add	r24, r30
 6ea:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <buffer_index.1808>
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	e2 5a       	subi	r30, 0xA2	; 162
 6f2:	fd 4f       	sbci	r31, 0xFD	; 253
 6f4:	8c e7       	ldi	r24, 0x7C	; 124
                            CRC16_Start();
 6f6:	80 83       	st	Z, r24
 6f8:	8e dd       	rcall	.-1252   	; 0x216 <CRC16_Start>
                            status_sm_rx = CRC_CALC;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <status_sm_rx.1806>
 700:	5f c0       	rjmp	.+190    	; 0x7c0 <USART_SM+0x150>
                        }
                    break;

                    default:
                        if (0 < buffer_index)
 702:	e0 91 c2 02 	lds	r30, 0x02C2	; 0x8002c2 <buffer_index.1808>
 706:	ee 23       	and	r30, r30
 708:	09 f4       	brne	.+2      	; 0x70c <USART_SM+0x9c>
 70a:	5a c0       	rjmp	.+180    	; 0x7c0 <USART_SM+0x150>
                        {
                            if(1 == flag_escape)
 70c:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <flag_escape.1810>
 710:	91 30       	cpi	r25, 0x01	; 1
 712:	21 f4       	brne	.+8      	; 0x71c <USART_SM+0xac>
                            {
                                flag_escape = 1;
 714:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <flag_escape.1810>
                                rd -= OFFSET;
 718:	80 58       	subi	r24, 0x80	; 128
 71a:	89 83       	std	Y+1, r24	; 0x01
                            }
                            internal_buffer[buffer_index++] = rd;
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	8e 0f       	add	r24, r30
 720:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <buffer_index.1808>
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	e2 5a       	subi	r30, 0xA2	; 162
 728:	fd 4f       	sbci	r31, 0xFD	; 253
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	80 83       	st	Z, r24
 72e:	48 c0       	rjmp	.+144    	; 0x7c0 <USART_SM+0x150>
                
            }
        break;

        case CRC_CALC:
            if(FINISHED == Calc_CRC16_Array(&internal_buffer[1], \
 730:	60 91 c2 02 	lds	r22, 0x02C2	; 0x8002c2 <buffer_index.1808>
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	64 50       	subi	r22, 0x04	; 4
 738:	71 09       	sbc	r23, r1
 73a:	ae 01       	movw	r20, r28
 73c:	4e 5f       	subi	r20, 0xFE	; 254
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	8f e5       	ldi	r24, 0x5F	; 95
 742:	92 e0       	ldi	r25, 0x02	; 2
 744:	9b dd       	rcall	.-1226   	; 0x27c <Calc_CRC16_Array>
 746:	82 30       	cpi	r24, 0x02	; 2
 748:	d9 f5       	brne	.+118    	; 0x7c0 <USART_SM+0x150>
				(buffer_index - 4), &crc_calc))
            {
                uint16_t crc_rec = 0;

                crc_rec = internal_buffer[buffer_index - 3];
 74a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer_index.1808>
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	82 5a       	subi	r24, 0xA2	; 162
 752:	9d 4f       	sbci	r25, 0xFD	; 253
 754:	fc 01       	movw	r30, r24
 756:	33 97       	sbiw	r30, 0x03	; 3
 758:	20 81       	ld	r18, Z
 75a:	30 e0       	ldi	r19, 0x00	; 0
                crc_rec <<= 8;
 75c:	32 2f       	mov	r19, r18
 75e:	22 27       	eor	r18, r18
                crc_rec |= internal_buffer[buffer_index - 2];
 760:	31 96       	adiw	r30, 0x01	; 1
                
                if(crc_rec == crc_calc)
 762:	80 81       	ld	r24, Z
 764:	a9 01       	movw	r20, r18
 766:	48 2b       	or	r20, r24
 768:	ca 01       	movw	r24, r20
 76a:	2a 81       	ldd	r18, Y+2	; 0x02
 76c:	3b 81       	ldd	r19, Y+3	; 0x03
 76e:	82 17       	cp	r24, r18
 770:	93 07       	cpc	r25, r19
 772:	21 f4       	brne	.+8      	; 0x77c <USART_SM+0x10c>
                {
                    status_sm_rx = HANDLE;
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <status_sm_rx.1806>
 77a:	22 c0       	rjmp	.+68     	; 0x7c0 <USART_SM+0x150>
                }
                else
                {
                    buffer_index = 0;
 77c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <buffer_index.1808>
                    status_sm_rx = READ;
 780:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <status_sm_rx.1806>
                    while(FINISHED != USART_StrTx((const char *)"CRC\n"));
 784:	89 e2       	ldi	r24, 0x29	; 41
 786:	92 e0       	ldi	r25, 0x02	; 2
 788:	4d df       	rcall	.-358    	; 0x624 <USART_StrTx>
 78a:	82 30       	cpi	r24, 0x02	; 2
 78c:	d9 f7       	brne	.-10     	; 0x784 <USART_SM+0x114>
 78e:	18 c0       	rjmp	.+48     	; 0x7c0 <USART_SM+0x150>
                }
            }
        break;

        case HANDLE:
            USART_Transmit(internal_buffer[index_aux++]);
 790:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <index_aux.1809>
 794:	11 e0       	ldi	r17, 0x01	; 1
 796:	1e 0f       	add	r17, r30
 798:	10 93 5c 02 	sts	0x025C, r17	; 0x80025c <index_aux.1809>
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	e2 5a       	subi	r30, 0xA2	; 162
 7a0:	fd 4f       	sbci	r31, 0xFD	; 253
 7a2:	80 81       	ld	r24, Z
 7a4:	37 df       	rcall	.-402    	; 0x614 <USART_Transmit>

            if(buffer_index == index_aux)
 7a6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <buffer_index.1808>
 7aa:	18 13       	cpse	r17, r24
 7ac:	09 c0       	rjmp	.+18     	; 0x7c0 <USART_SM+0x150>
            {
                index_aux = 0;
 7ae:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <index_aux.1809>
                buffer_index = 0;
 7b2:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <buffer_index.1808>
                status_sm_rx = READ;
 7b6:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <status_sm_rx.1806>
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <USART_SM+0x150>
            }
        break;

        default:
            status_sm_rx = READ;
 7bc:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <status_sm_rx.1806>
        break;
    }
}
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	0f 90       	pop	r0
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	08 95       	ret

000007ce <__vector_25>:

ISR(USART0_RX_vect)
{
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	0f 92       	push	r0
 7d6:	11 24       	eor	r1, r1
 7d8:	0b b6       	in	r0, 0x3b	; 59
 7da:	0f 92       	push	r0
 7dc:	2f 93       	push	r18
 7de:	3f 93       	push	r19
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	6f 93       	push	r22
 7e6:	7f 93       	push	r23
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	af 93       	push	r26
 7ee:	bf 93       	push	r27
 7f0:	ef 93       	push	r30
 7f2:	ff 93       	push	r31
    char res;
    res = UDR0;
 7f4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    Buffer_Add_Data(&buffer, res);
 7f8:	86 ec       	ldi	r24, 0xC6	; 198
 7fa:	92 e0       	ldi	r25, 0x02	; 2
 7fc:	c2 de       	rcall	.-636    	; 0x582 <Buffer_Add_Data>
 7fe:	ff 91       	pop	r31
 800:	ef 91       	pop	r30
 802:	bf 91       	pop	r27
 804:	af 91       	pop	r26
 806:	9f 91       	pop	r25
 808:	8f 91       	pop	r24
 80a:	7f 91       	pop	r23
 80c:	6f 91       	pop	r22
 80e:	5f 91       	pop	r21
 810:	4f 91       	pop	r20
 812:	3f 91       	pop	r19
 814:	2f 91       	pop	r18
 816:	0f 90       	pop	r0
 818:	0b be       	out	0x3b, r0	; 59
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <__adddi3_s8>:
 824:	00 24       	eor	r0, r0
 826:	a7 fd       	sbrc	r26, 7
 828:	00 94       	com	r0
 82a:	2a 0f       	add	r18, r26
 82c:	30 1d       	adc	r19, r0
 82e:	40 1d       	adc	r20, r0
 830:	50 1d       	adc	r21, r0
 832:	60 1d       	adc	r22, r0
 834:	70 1d       	adc	r23, r0
 836:	80 1d       	adc	r24, r0
 838:	90 1d       	adc	r25, r0
 83a:	08 95       	ret

0000083c <sprintf>:
 83c:	0f 93       	push	r16
 83e:	1f 93       	push	r17
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	2e 97       	sbiw	r28, 0x0e	; 14
 84a:	0f b6       	in	r0, 0x3f	; 63
 84c:	f8 94       	cli
 84e:	de bf       	out	0x3e, r29	; 62
 850:	0f be       	out	0x3f, r0	; 63
 852:	cd bf       	out	0x3d, r28	; 61
 854:	0e 89       	ldd	r16, Y+22	; 0x16
 856:	1f 89       	ldd	r17, Y+23	; 0x17
 858:	86 e0       	ldi	r24, 0x06	; 6
 85a:	8c 83       	std	Y+4, r24	; 0x04
 85c:	1a 83       	std	Y+2, r17	; 0x02
 85e:	09 83       	std	Y+1, r16	; 0x01
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	9f e7       	ldi	r25, 0x7F	; 127
 864:	9e 83       	std	Y+6, r25	; 0x06
 866:	8d 83       	std	Y+5, r24	; 0x05
 868:	ae 01       	movw	r20, r28
 86a:	46 5e       	subi	r20, 0xE6	; 230
 86c:	5f 4f       	sbci	r21, 0xFF	; 255
 86e:	68 8d       	ldd	r22, Y+24	; 0x18
 870:	79 8d       	ldd	r23, Y+25	; 0x19
 872:	ce 01       	movw	r24, r28
 874:	01 96       	adiw	r24, 0x01	; 1
 876:	10 d0       	rcall	.+32     	; 0x898 <vfprintf>
 878:	ef 81       	ldd	r30, Y+7	; 0x07
 87a:	f8 85       	ldd	r31, Y+8	; 0x08
 87c:	e0 0f       	add	r30, r16
 87e:	f1 1f       	adc	r31, r17
 880:	10 82       	st	Z, r1
 882:	2e 96       	adiw	r28, 0x0e	; 14
 884:	0f b6       	in	r0, 0x3f	; 63
 886:	f8 94       	cli
 888:	de bf       	out	0x3e, r29	; 62
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	cd bf       	out	0x3d, r28	; 61
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	1f 91       	pop	r17
 894:	0f 91       	pop	r16
 896:	08 95       	ret

00000898 <vfprintf>:
 898:	2f 92       	push	r2
 89a:	3f 92       	push	r3
 89c:	4f 92       	push	r4
 89e:	5f 92       	push	r5
 8a0:	6f 92       	push	r6
 8a2:	7f 92       	push	r7
 8a4:	8f 92       	push	r8
 8a6:	9f 92       	push	r9
 8a8:	af 92       	push	r10
 8aa:	bf 92       	push	r11
 8ac:	cf 92       	push	r12
 8ae:	df 92       	push	r13
 8b0:	ef 92       	push	r14
 8b2:	ff 92       	push	r15
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	2b 97       	sbiw	r28, 0x0b	; 11
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
 8cc:	6c 01       	movw	r12, r24
 8ce:	7b 01       	movw	r14, r22
 8d0:	8a 01       	movw	r16, r20
 8d2:	fc 01       	movw	r30, r24
 8d4:	17 82       	std	Z+7, r1	; 0x07
 8d6:	16 82       	std	Z+6, r1	; 0x06
 8d8:	83 81       	ldd	r24, Z+3	; 0x03
 8da:	81 ff       	sbrs	r24, 1
 8dc:	bf c1       	rjmp	.+894    	; 0xc5c <vfprintf+0x3c4>
 8de:	ce 01       	movw	r24, r28
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	3c 01       	movw	r6, r24
 8e4:	f6 01       	movw	r30, r12
 8e6:	93 81       	ldd	r25, Z+3	; 0x03
 8e8:	f7 01       	movw	r30, r14
 8ea:	93 fd       	sbrc	r25, 3
 8ec:	85 91       	lpm	r24, Z+
 8ee:	93 ff       	sbrs	r25, 3
 8f0:	81 91       	ld	r24, Z+
 8f2:	7f 01       	movw	r14, r30
 8f4:	88 23       	and	r24, r24
 8f6:	09 f4       	brne	.+2      	; 0x8fa <vfprintf+0x62>
 8f8:	ad c1       	rjmp	.+858    	; 0xc54 <vfprintf+0x3bc>
 8fa:	85 32       	cpi	r24, 0x25	; 37
 8fc:	39 f4       	brne	.+14     	; 0x90c <vfprintf+0x74>
 8fe:	93 fd       	sbrc	r25, 3
 900:	85 91       	lpm	r24, Z+
 902:	93 ff       	sbrs	r25, 3
 904:	81 91       	ld	r24, Z+
 906:	7f 01       	movw	r14, r30
 908:	85 32       	cpi	r24, 0x25	; 37
 90a:	21 f4       	brne	.+8      	; 0x914 <vfprintf+0x7c>
 90c:	b6 01       	movw	r22, r12
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	d6 d1       	rcall	.+940    	; 0xcbe <fputc>
 912:	e8 cf       	rjmp	.-48     	; 0x8e4 <vfprintf+0x4c>
 914:	91 2c       	mov	r9, r1
 916:	21 2c       	mov	r2, r1
 918:	31 2c       	mov	r3, r1
 91a:	ff e1       	ldi	r31, 0x1F	; 31
 91c:	f3 15       	cp	r31, r3
 91e:	d8 f0       	brcs	.+54     	; 0x956 <vfprintf+0xbe>
 920:	8b 32       	cpi	r24, 0x2B	; 43
 922:	79 f0       	breq	.+30     	; 0x942 <vfprintf+0xaa>
 924:	38 f4       	brcc	.+14     	; 0x934 <vfprintf+0x9c>
 926:	80 32       	cpi	r24, 0x20	; 32
 928:	79 f0       	breq	.+30     	; 0x948 <vfprintf+0xb0>
 92a:	83 32       	cpi	r24, 0x23	; 35
 92c:	a1 f4       	brne	.+40     	; 0x956 <vfprintf+0xbe>
 92e:	23 2d       	mov	r18, r3
 930:	20 61       	ori	r18, 0x10	; 16
 932:	1d c0       	rjmp	.+58     	; 0x96e <vfprintf+0xd6>
 934:	8d 32       	cpi	r24, 0x2D	; 45
 936:	61 f0       	breq	.+24     	; 0x950 <vfprintf+0xb8>
 938:	80 33       	cpi	r24, 0x30	; 48
 93a:	69 f4       	brne	.+26     	; 0x956 <vfprintf+0xbe>
 93c:	23 2d       	mov	r18, r3
 93e:	21 60       	ori	r18, 0x01	; 1
 940:	16 c0       	rjmp	.+44     	; 0x96e <vfprintf+0xd6>
 942:	83 2d       	mov	r24, r3
 944:	82 60       	ori	r24, 0x02	; 2
 946:	38 2e       	mov	r3, r24
 948:	e3 2d       	mov	r30, r3
 94a:	e4 60       	ori	r30, 0x04	; 4
 94c:	3e 2e       	mov	r3, r30
 94e:	2a c0       	rjmp	.+84     	; 0x9a4 <vfprintf+0x10c>
 950:	f3 2d       	mov	r31, r3
 952:	f8 60       	ori	r31, 0x08	; 8
 954:	1d c0       	rjmp	.+58     	; 0x990 <vfprintf+0xf8>
 956:	37 fc       	sbrc	r3, 7
 958:	2d c0       	rjmp	.+90     	; 0x9b4 <vfprintf+0x11c>
 95a:	20 ed       	ldi	r18, 0xD0	; 208
 95c:	28 0f       	add	r18, r24
 95e:	2a 30       	cpi	r18, 0x0A	; 10
 960:	40 f0       	brcs	.+16     	; 0x972 <vfprintf+0xda>
 962:	8e 32       	cpi	r24, 0x2E	; 46
 964:	b9 f4       	brne	.+46     	; 0x994 <vfprintf+0xfc>
 966:	36 fc       	sbrc	r3, 6
 968:	75 c1       	rjmp	.+746    	; 0xc54 <vfprintf+0x3bc>
 96a:	23 2d       	mov	r18, r3
 96c:	20 64       	ori	r18, 0x40	; 64
 96e:	32 2e       	mov	r3, r18
 970:	19 c0       	rjmp	.+50     	; 0x9a4 <vfprintf+0x10c>
 972:	36 fe       	sbrs	r3, 6
 974:	06 c0       	rjmp	.+12     	; 0x982 <vfprintf+0xea>
 976:	8a e0       	ldi	r24, 0x0A	; 10
 978:	98 9e       	mul	r9, r24
 97a:	20 0d       	add	r18, r0
 97c:	11 24       	eor	r1, r1
 97e:	92 2e       	mov	r9, r18
 980:	11 c0       	rjmp	.+34     	; 0x9a4 <vfprintf+0x10c>
 982:	ea e0       	ldi	r30, 0x0A	; 10
 984:	2e 9e       	mul	r2, r30
 986:	20 0d       	add	r18, r0
 988:	11 24       	eor	r1, r1
 98a:	22 2e       	mov	r2, r18
 98c:	f3 2d       	mov	r31, r3
 98e:	f0 62       	ori	r31, 0x20	; 32
 990:	3f 2e       	mov	r3, r31
 992:	08 c0       	rjmp	.+16     	; 0x9a4 <vfprintf+0x10c>
 994:	8c 36       	cpi	r24, 0x6C	; 108
 996:	21 f4       	brne	.+8      	; 0x9a0 <vfprintf+0x108>
 998:	83 2d       	mov	r24, r3
 99a:	80 68       	ori	r24, 0x80	; 128
 99c:	38 2e       	mov	r3, r24
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <vfprintf+0x10c>
 9a0:	88 36       	cpi	r24, 0x68	; 104
 9a2:	41 f4       	brne	.+16     	; 0x9b4 <vfprintf+0x11c>
 9a4:	f7 01       	movw	r30, r14
 9a6:	93 fd       	sbrc	r25, 3
 9a8:	85 91       	lpm	r24, Z+
 9aa:	93 ff       	sbrs	r25, 3
 9ac:	81 91       	ld	r24, Z+
 9ae:	7f 01       	movw	r14, r30
 9b0:	81 11       	cpse	r24, r1
 9b2:	b3 cf       	rjmp	.-154    	; 0x91a <vfprintf+0x82>
 9b4:	98 2f       	mov	r25, r24
 9b6:	9f 7d       	andi	r25, 0xDF	; 223
 9b8:	95 54       	subi	r25, 0x45	; 69
 9ba:	93 30       	cpi	r25, 0x03	; 3
 9bc:	28 f4       	brcc	.+10     	; 0x9c8 <vfprintf+0x130>
 9be:	0c 5f       	subi	r16, 0xFC	; 252
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	9f e3       	ldi	r25, 0x3F	; 63
 9c4:	99 83       	std	Y+1, r25	; 0x01
 9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <vfprintf+0x14a>
 9c8:	83 36       	cpi	r24, 0x63	; 99
 9ca:	31 f0       	breq	.+12     	; 0x9d8 <vfprintf+0x140>
 9cc:	83 37       	cpi	r24, 0x73	; 115
 9ce:	71 f0       	breq	.+28     	; 0x9ec <vfprintf+0x154>
 9d0:	83 35       	cpi	r24, 0x53	; 83
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <vfprintf+0x13e>
 9d4:	55 c0       	rjmp	.+170    	; 0xa80 <vfprintf+0x1e8>
 9d6:	20 c0       	rjmp	.+64     	; 0xa18 <vfprintf+0x180>
 9d8:	f8 01       	movw	r30, r16
 9da:	80 81       	ld	r24, Z
 9dc:	89 83       	std	Y+1, r24	; 0x01
 9de:	0e 5f       	subi	r16, 0xFE	; 254
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	88 24       	eor	r8, r8
 9e4:	83 94       	inc	r8
 9e6:	91 2c       	mov	r9, r1
 9e8:	53 01       	movw	r10, r6
 9ea:	12 c0       	rjmp	.+36     	; 0xa10 <vfprintf+0x178>
 9ec:	28 01       	movw	r4, r16
 9ee:	f2 e0       	ldi	r31, 0x02	; 2
 9f0:	4f 0e       	add	r4, r31
 9f2:	51 1c       	adc	r5, r1
 9f4:	f8 01       	movw	r30, r16
 9f6:	a0 80       	ld	r10, Z
 9f8:	b1 80       	ldd	r11, Z+1	; 0x01
 9fa:	36 fe       	sbrs	r3, 6
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <vfprintf+0x16c>
 9fe:	69 2d       	mov	r22, r9
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <vfprintf+0x170>
 a04:	6f ef       	ldi	r22, 0xFF	; 255
 a06:	7f ef       	ldi	r23, 0xFF	; 255
 a08:	c5 01       	movw	r24, r10
 a0a:	4e d1       	rcall	.+668    	; 0xca8 <strnlen>
 a0c:	4c 01       	movw	r8, r24
 a0e:	82 01       	movw	r16, r4
 a10:	f3 2d       	mov	r31, r3
 a12:	ff 77       	andi	r31, 0x7F	; 127
 a14:	3f 2e       	mov	r3, r31
 a16:	15 c0       	rjmp	.+42     	; 0xa42 <vfprintf+0x1aa>
 a18:	28 01       	movw	r4, r16
 a1a:	22 e0       	ldi	r18, 0x02	; 2
 a1c:	42 0e       	add	r4, r18
 a1e:	51 1c       	adc	r5, r1
 a20:	f8 01       	movw	r30, r16
 a22:	a0 80       	ld	r10, Z
 a24:	b1 80       	ldd	r11, Z+1	; 0x01
 a26:	36 fe       	sbrs	r3, 6
 a28:	03 c0       	rjmp	.+6      	; 0xa30 <vfprintf+0x198>
 a2a:	69 2d       	mov	r22, r9
 a2c:	70 e0       	ldi	r23, 0x00	; 0
 a2e:	02 c0       	rjmp	.+4      	; 0xa34 <vfprintf+0x19c>
 a30:	6f ef       	ldi	r22, 0xFF	; 255
 a32:	7f ef       	ldi	r23, 0xFF	; 255
 a34:	c5 01       	movw	r24, r10
 a36:	2d d1       	rcall	.+602    	; 0xc92 <strnlen_P>
 a38:	4c 01       	movw	r8, r24
 a3a:	f3 2d       	mov	r31, r3
 a3c:	f0 68       	ori	r31, 0x80	; 128
 a3e:	3f 2e       	mov	r3, r31
 a40:	82 01       	movw	r16, r4
 a42:	33 fc       	sbrc	r3, 3
 a44:	19 c0       	rjmp	.+50     	; 0xa78 <vfprintf+0x1e0>
 a46:	82 2d       	mov	r24, r2
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	88 16       	cp	r8, r24
 a4c:	99 06       	cpc	r9, r25
 a4e:	a0 f4       	brcc	.+40     	; 0xa78 <vfprintf+0x1e0>
 a50:	b6 01       	movw	r22, r12
 a52:	80 e2       	ldi	r24, 0x20	; 32
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	33 d1       	rcall	.+614    	; 0xcbe <fputc>
 a58:	2a 94       	dec	r2
 a5a:	f5 cf       	rjmp	.-22     	; 0xa46 <vfprintf+0x1ae>
 a5c:	f5 01       	movw	r30, r10
 a5e:	37 fc       	sbrc	r3, 7
 a60:	85 91       	lpm	r24, Z+
 a62:	37 fe       	sbrs	r3, 7
 a64:	81 91       	ld	r24, Z+
 a66:	5f 01       	movw	r10, r30
 a68:	b6 01       	movw	r22, r12
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	28 d1       	rcall	.+592    	; 0xcbe <fputc>
 a6e:	21 10       	cpse	r2, r1
 a70:	2a 94       	dec	r2
 a72:	21 e0       	ldi	r18, 0x01	; 1
 a74:	82 1a       	sub	r8, r18
 a76:	91 08       	sbc	r9, r1
 a78:	81 14       	cp	r8, r1
 a7a:	91 04       	cpc	r9, r1
 a7c:	79 f7       	brne	.-34     	; 0xa5c <vfprintf+0x1c4>
 a7e:	e1 c0       	rjmp	.+450    	; 0xc42 <vfprintf+0x3aa>
 a80:	84 36       	cpi	r24, 0x64	; 100
 a82:	11 f0       	breq	.+4      	; 0xa88 <vfprintf+0x1f0>
 a84:	89 36       	cpi	r24, 0x69	; 105
 a86:	39 f5       	brne	.+78     	; 0xad6 <vfprintf+0x23e>
 a88:	f8 01       	movw	r30, r16
 a8a:	37 fe       	sbrs	r3, 7
 a8c:	07 c0       	rjmp	.+14     	; 0xa9c <vfprintf+0x204>
 a8e:	60 81       	ld	r22, Z
 a90:	71 81       	ldd	r23, Z+1	; 0x01
 a92:	82 81       	ldd	r24, Z+2	; 0x02
 a94:	93 81       	ldd	r25, Z+3	; 0x03
 a96:	0c 5f       	subi	r16, 0xFC	; 252
 a98:	1f 4f       	sbci	r17, 0xFF	; 255
 a9a:	08 c0       	rjmp	.+16     	; 0xaac <vfprintf+0x214>
 a9c:	60 81       	ld	r22, Z
 a9e:	71 81       	ldd	r23, Z+1	; 0x01
 aa0:	07 2e       	mov	r0, r23
 aa2:	00 0c       	add	r0, r0
 aa4:	88 0b       	sbc	r24, r24
 aa6:	99 0b       	sbc	r25, r25
 aa8:	0e 5f       	subi	r16, 0xFE	; 254
 aaa:	1f 4f       	sbci	r17, 0xFF	; 255
 aac:	f3 2d       	mov	r31, r3
 aae:	ff 76       	andi	r31, 0x6F	; 111
 ab0:	3f 2e       	mov	r3, r31
 ab2:	97 ff       	sbrs	r25, 7
 ab4:	09 c0       	rjmp	.+18     	; 0xac8 <vfprintf+0x230>
 ab6:	90 95       	com	r25
 ab8:	80 95       	com	r24
 aba:	70 95       	com	r23
 abc:	61 95       	neg	r22
 abe:	7f 4f       	sbci	r23, 0xFF	; 255
 ac0:	8f 4f       	sbci	r24, 0xFF	; 255
 ac2:	9f 4f       	sbci	r25, 0xFF	; 255
 ac4:	f0 68       	ori	r31, 0x80	; 128
 ac6:	3f 2e       	mov	r3, r31
 ac8:	2a e0       	ldi	r18, 0x0A	; 10
 aca:	30 e0       	ldi	r19, 0x00	; 0
 acc:	a3 01       	movw	r20, r6
 ace:	33 d1       	rcall	.+614    	; 0xd36 <__ultoa_invert>
 ad0:	88 2e       	mov	r8, r24
 ad2:	86 18       	sub	r8, r6
 ad4:	44 c0       	rjmp	.+136    	; 0xb5e <vfprintf+0x2c6>
 ad6:	85 37       	cpi	r24, 0x75	; 117
 ad8:	31 f4       	brne	.+12     	; 0xae6 <vfprintf+0x24e>
 ada:	23 2d       	mov	r18, r3
 adc:	2f 7e       	andi	r18, 0xEF	; 239
 ade:	b2 2e       	mov	r11, r18
 ae0:	2a e0       	ldi	r18, 0x0A	; 10
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	25 c0       	rjmp	.+74     	; 0xb30 <vfprintf+0x298>
 ae6:	93 2d       	mov	r25, r3
 ae8:	99 7f       	andi	r25, 0xF9	; 249
 aea:	b9 2e       	mov	r11, r25
 aec:	8f 36       	cpi	r24, 0x6F	; 111
 aee:	c1 f0       	breq	.+48     	; 0xb20 <vfprintf+0x288>
 af0:	18 f4       	brcc	.+6      	; 0xaf8 <vfprintf+0x260>
 af2:	88 35       	cpi	r24, 0x58	; 88
 af4:	79 f0       	breq	.+30     	; 0xb14 <vfprintf+0x27c>
 af6:	ae c0       	rjmp	.+348    	; 0xc54 <vfprintf+0x3bc>
 af8:	80 37       	cpi	r24, 0x70	; 112
 afa:	19 f0       	breq	.+6      	; 0xb02 <vfprintf+0x26a>
 afc:	88 37       	cpi	r24, 0x78	; 120
 afe:	21 f0       	breq	.+8      	; 0xb08 <vfprintf+0x270>
 b00:	a9 c0       	rjmp	.+338    	; 0xc54 <vfprintf+0x3bc>
 b02:	e9 2f       	mov	r30, r25
 b04:	e0 61       	ori	r30, 0x10	; 16
 b06:	be 2e       	mov	r11, r30
 b08:	b4 fe       	sbrs	r11, 4
 b0a:	0d c0       	rjmp	.+26     	; 0xb26 <vfprintf+0x28e>
 b0c:	fb 2d       	mov	r31, r11
 b0e:	f4 60       	ori	r31, 0x04	; 4
 b10:	bf 2e       	mov	r11, r31
 b12:	09 c0       	rjmp	.+18     	; 0xb26 <vfprintf+0x28e>
 b14:	34 fe       	sbrs	r3, 4
 b16:	0a c0       	rjmp	.+20     	; 0xb2c <vfprintf+0x294>
 b18:	29 2f       	mov	r18, r25
 b1a:	26 60       	ori	r18, 0x06	; 6
 b1c:	b2 2e       	mov	r11, r18
 b1e:	06 c0       	rjmp	.+12     	; 0xb2c <vfprintf+0x294>
 b20:	28 e0       	ldi	r18, 0x08	; 8
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	05 c0       	rjmp	.+10     	; 0xb30 <vfprintf+0x298>
 b26:	20 e1       	ldi	r18, 0x10	; 16
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <vfprintf+0x298>
 b2c:	20 e1       	ldi	r18, 0x10	; 16
 b2e:	32 e0       	ldi	r19, 0x02	; 2
 b30:	f8 01       	movw	r30, r16
 b32:	b7 fe       	sbrs	r11, 7
 b34:	07 c0       	rjmp	.+14     	; 0xb44 <vfprintf+0x2ac>
 b36:	60 81       	ld	r22, Z
 b38:	71 81       	ldd	r23, Z+1	; 0x01
 b3a:	82 81       	ldd	r24, Z+2	; 0x02
 b3c:	93 81       	ldd	r25, Z+3	; 0x03
 b3e:	0c 5f       	subi	r16, 0xFC	; 252
 b40:	1f 4f       	sbci	r17, 0xFF	; 255
 b42:	06 c0       	rjmp	.+12     	; 0xb50 <vfprintf+0x2b8>
 b44:	60 81       	ld	r22, Z
 b46:	71 81       	ldd	r23, Z+1	; 0x01
 b48:	80 e0       	ldi	r24, 0x00	; 0
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 5f       	subi	r16, 0xFE	; 254
 b4e:	1f 4f       	sbci	r17, 0xFF	; 255
 b50:	a3 01       	movw	r20, r6
 b52:	f1 d0       	rcall	.+482    	; 0xd36 <__ultoa_invert>
 b54:	88 2e       	mov	r8, r24
 b56:	86 18       	sub	r8, r6
 b58:	fb 2d       	mov	r31, r11
 b5a:	ff 77       	andi	r31, 0x7F	; 127
 b5c:	3f 2e       	mov	r3, r31
 b5e:	36 fe       	sbrs	r3, 6
 b60:	0d c0       	rjmp	.+26     	; 0xb7c <vfprintf+0x2e4>
 b62:	23 2d       	mov	r18, r3
 b64:	2e 7f       	andi	r18, 0xFE	; 254
 b66:	a2 2e       	mov	r10, r18
 b68:	89 14       	cp	r8, r9
 b6a:	58 f4       	brcc	.+22     	; 0xb82 <vfprintf+0x2ea>
 b6c:	34 fe       	sbrs	r3, 4
 b6e:	0b c0       	rjmp	.+22     	; 0xb86 <vfprintf+0x2ee>
 b70:	32 fc       	sbrc	r3, 2
 b72:	09 c0       	rjmp	.+18     	; 0xb86 <vfprintf+0x2ee>
 b74:	83 2d       	mov	r24, r3
 b76:	8e 7e       	andi	r24, 0xEE	; 238
 b78:	a8 2e       	mov	r10, r24
 b7a:	05 c0       	rjmp	.+10     	; 0xb86 <vfprintf+0x2ee>
 b7c:	b8 2c       	mov	r11, r8
 b7e:	a3 2c       	mov	r10, r3
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <vfprintf+0x2f0>
 b82:	b8 2c       	mov	r11, r8
 b84:	01 c0       	rjmp	.+2      	; 0xb88 <vfprintf+0x2f0>
 b86:	b9 2c       	mov	r11, r9
 b88:	a4 fe       	sbrs	r10, 4
 b8a:	0f c0       	rjmp	.+30     	; 0xbaa <vfprintf+0x312>
 b8c:	fe 01       	movw	r30, r28
 b8e:	e8 0d       	add	r30, r8
 b90:	f1 1d       	adc	r31, r1
 b92:	80 81       	ld	r24, Z
 b94:	80 33       	cpi	r24, 0x30	; 48
 b96:	21 f4       	brne	.+8      	; 0xba0 <vfprintf+0x308>
 b98:	9a 2d       	mov	r25, r10
 b9a:	99 7e       	andi	r25, 0xE9	; 233
 b9c:	a9 2e       	mov	r10, r25
 b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <vfprintf+0x31a>
 ba0:	a2 fe       	sbrs	r10, 2
 ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <vfprintf+0x318>
 ba4:	b3 94       	inc	r11
 ba6:	b3 94       	inc	r11
 ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <vfprintf+0x31a>
 baa:	8a 2d       	mov	r24, r10
 bac:	86 78       	andi	r24, 0x86	; 134
 bae:	09 f0       	breq	.+2      	; 0xbb2 <vfprintf+0x31a>
 bb0:	b3 94       	inc	r11
 bb2:	a3 fc       	sbrc	r10, 3
 bb4:	10 c0       	rjmp	.+32     	; 0xbd6 <vfprintf+0x33e>
 bb6:	a0 fe       	sbrs	r10, 0
 bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <vfprintf+0x32e>
 bba:	b2 14       	cp	r11, r2
 bbc:	80 f4       	brcc	.+32     	; 0xbde <vfprintf+0x346>
 bbe:	28 0c       	add	r2, r8
 bc0:	92 2c       	mov	r9, r2
 bc2:	9b 18       	sub	r9, r11
 bc4:	0d c0       	rjmp	.+26     	; 0xbe0 <vfprintf+0x348>
 bc6:	b2 14       	cp	r11, r2
 bc8:	58 f4       	brcc	.+22     	; 0xbe0 <vfprintf+0x348>
 bca:	b6 01       	movw	r22, r12
 bcc:	80 e2       	ldi	r24, 0x20	; 32
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	76 d0       	rcall	.+236    	; 0xcbe <fputc>
 bd2:	b3 94       	inc	r11
 bd4:	f8 cf       	rjmp	.-16     	; 0xbc6 <vfprintf+0x32e>
 bd6:	b2 14       	cp	r11, r2
 bd8:	18 f4       	brcc	.+6      	; 0xbe0 <vfprintf+0x348>
 bda:	2b 18       	sub	r2, r11
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <vfprintf+0x34a>
 bde:	98 2c       	mov	r9, r8
 be0:	21 2c       	mov	r2, r1
 be2:	a4 fe       	sbrs	r10, 4
 be4:	0f c0       	rjmp	.+30     	; 0xc04 <vfprintf+0x36c>
 be6:	b6 01       	movw	r22, r12
 be8:	80 e3       	ldi	r24, 0x30	; 48
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	68 d0       	rcall	.+208    	; 0xcbe <fputc>
 bee:	a2 fe       	sbrs	r10, 2
 bf0:	16 c0       	rjmp	.+44     	; 0xc1e <vfprintf+0x386>
 bf2:	a1 fc       	sbrc	r10, 1
 bf4:	03 c0       	rjmp	.+6      	; 0xbfc <vfprintf+0x364>
 bf6:	88 e7       	ldi	r24, 0x78	; 120
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <vfprintf+0x368>
 bfc:	88 e5       	ldi	r24, 0x58	; 88
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	b6 01       	movw	r22, r12
 c02:	0c c0       	rjmp	.+24     	; 0xc1c <vfprintf+0x384>
 c04:	8a 2d       	mov	r24, r10
 c06:	86 78       	andi	r24, 0x86	; 134
 c08:	51 f0       	breq	.+20     	; 0xc1e <vfprintf+0x386>
 c0a:	a1 fe       	sbrs	r10, 1
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <vfprintf+0x37a>
 c0e:	8b e2       	ldi	r24, 0x2B	; 43
 c10:	01 c0       	rjmp	.+2      	; 0xc14 <vfprintf+0x37c>
 c12:	80 e2       	ldi	r24, 0x20	; 32
 c14:	a7 fc       	sbrc	r10, 7
 c16:	8d e2       	ldi	r24, 0x2D	; 45
 c18:	b6 01       	movw	r22, r12
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	50 d0       	rcall	.+160    	; 0xcbe <fputc>
 c1e:	89 14       	cp	r8, r9
 c20:	30 f4       	brcc	.+12     	; 0xc2e <vfprintf+0x396>
 c22:	b6 01       	movw	r22, r12
 c24:	80 e3       	ldi	r24, 0x30	; 48
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	4a d0       	rcall	.+148    	; 0xcbe <fputc>
 c2a:	9a 94       	dec	r9
 c2c:	f8 cf       	rjmp	.-16     	; 0xc1e <vfprintf+0x386>
 c2e:	8a 94       	dec	r8
 c30:	f3 01       	movw	r30, r6
 c32:	e8 0d       	add	r30, r8
 c34:	f1 1d       	adc	r31, r1
 c36:	80 81       	ld	r24, Z
 c38:	b6 01       	movw	r22, r12
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	40 d0       	rcall	.+128    	; 0xcbe <fputc>
 c3e:	81 10       	cpse	r8, r1
 c40:	f6 cf       	rjmp	.-20     	; 0xc2e <vfprintf+0x396>
 c42:	22 20       	and	r2, r2
 c44:	09 f4       	brne	.+2      	; 0xc48 <vfprintf+0x3b0>
 c46:	4e ce       	rjmp	.-868    	; 0x8e4 <vfprintf+0x4c>
 c48:	b6 01       	movw	r22, r12
 c4a:	80 e2       	ldi	r24, 0x20	; 32
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	37 d0       	rcall	.+110    	; 0xcbe <fputc>
 c50:	2a 94       	dec	r2
 c52:	f7 cf       	rjmp	.-18     	; 0xc42 <vfprintf+0x3aa>
 c54:	f6 01       	movw	r30, r12
 c56:	86 81       	ldd	r24, Z+6	; 0x06
 c58:	97 81       	ldd	r25, Z+7	; 0x07
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <vfprintf+0x3c8>
 c5c:	8f ef       	ldi	r24, 0xFF	; 255
 c5e:	9f ef       	ldi	r25, 0xFF	; 255
 c60:	2b 96       	adiw	r28, 0x0b	; 11
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	df 91       	pop	r29
 c6e:	cf 91       	pop	r28
 c70:	1f 91       	pop	r17
 c72:	0f 91       	pop	r16
 c74:	ff 90       	pop	r15
 c76:	ef 90       	pop	r14
 c78:	df 90       	pop	r13
 c7a:	cf 90       	pop	r12
 c7c:	bf 90       	pop	r11
 c7e:	af 90       	pop	r10
 c80:	9f 90       	pop	r9
 c82:	8f 90       	pop	r8
 c84:	7f 90       	pop	r7
 c86:	6f 90       	pop	r6
 c88:	5f 90       	pop	r5
 c8a:	4f 90       	pop	r4
 c8c:	3f 90       	pop	r3
 c8e:	2f 90       	pop	r2
 c90:	08 95       	ret

00000c92 <strnlen_P>:
 c92:	fc 01       	movw	r30, r24
 c94:	05 90       	lpm	r0, Z+
 c96:	61 50       	subi	r22, 0x01	; 1
 c98:	70 40       	sbci	r23, 0x00	; 0
 c9a:	01 10       	cpse	r0, r1
 c9c:	d8 f7       	brcc	.-10     	; 0xc94 <strnlen_P+0x2>
 c9e:	80 95       	com	r24
 ca0:	90 95       	com	r25
 ca2:	8e 0f       	add	r24, r30
 ca4:	9f 1f       	adc	r25, r31
 ca6:	08 95       	ret

00000ca8 <strnlen>:
 ca8:	fc 01       	movw	r30, r24
 caa:	61 50       	subi	r22, 0x01	; 1
 cac:	70 40       	sbci	r23, 0x00	; 0
 cae:	01 90       	ld	r0, Z+
 cb0:	01 10       	cpse	r0, r1
 cb2:	d8 f7       	brcc	.-10     	; 0xcaa <strnlen+0x2>
 cb4:	80 95       	com	r24
 cb6:	90 95       	com	r25
 cb8:	8e 0f       	add	r24, r30
 cba:	9f 1f       	adc	r25, r31
 cbc:	08 95       	ret

00000cbe <fputc>:
 cbe:	0f 93       	push	r16
 cc0:	1f 93       	push	r17
 cc2:	cf 93       	push	r28
 cc4:	df 93       	push	r29
 cc6:	fb 01       	movw	r30, r22
 cc8:	23 81       	ldd	r18, Z+3	; 0x03
 cca:	21 fd       	sbrc	r18, 1
 ccc:	03 c0       	rjmp	.+6      	; 0xcd4 <fputc+0x16>
 cce:	8f ef       	ldi	r24, 0xFF	; 255
 cd0:	9f ef       	ldi	r25, 0xFF	; 255
 cd2:	2c c0       	rjmp	.+88     	; 0xd2c <fputc+0x6e>
 cd4:	22 ff       	sbrs	r18, 2
 cd6:	16 c0       	rjmp	.+44     	; 0xd04 <fputc+0x46>
 cd8:	46 81       	ldd	r20, Z+6	; 0x06
 cda:	57 81       	ldd	r21, Z+7	; 0x07
 cdc:	24 81       	ldd	r18, Z+4	; 0x04
 cde:	35 81       	ldd	r19, Z+5	; 0x05
 ce0:	42 17       	cp	r20, r18
 ce2:	53 07       	cpc	r21, r19
 ce4:	44 f4       	brge	.+16     	; 0xcf6 <fputc+0x38>
 ce6:	a0 81       	ld	r26, Z
 ce8:	b1 81       	ldd	r27, Z+1	; 0x01
 cea:	9d 01       	movw	r18, r26
 cec:	2f 5f       	subi	r18, 0xFF	; 255
 cee:	3f 4f       	sbci	r19, 0xFF	; 255
 cf0:	31 83       	std	Z+1, r19	; 0x01
 cf2:	20 83       	st	Z, r18
 cf4:	8c 93       	st	X, r24
 cf6:	26 81       	ldd	r18, Z+6	; 0x06
 cf8:	37 81       	ldd	r19, Z+7	; 0x07
 cfa:	2f 5f       	subi	r18, 0xFF	; 255
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	37 83       	std	Z+7, r19	; 0x07
 d00:	26 83       	std	Z+6, r18	; 0x06
 d02:	14 c0       	rjmp	.+40     	; 0xd2c <fputc+0x6e>
 d04:	8b 01       	movw	r16, r22
 d06:	ec 01       	movw	r28, r24
 d08:	fb 01       	movw	r30, r22
 d0a:	00 84       	ldd	r0, Z+8	; 0x08
 d0c:	f1 85       	ldd	r31, Z+9	; 0x09
 d0e:	e0 2d       	mov	r30, r0
 d10:	19 95       	eicall
 d12:	89 2b       	or	r24, r25
 d14:	e1 f6       	brne	.-72     	; 0xcce <fputc+0x10>
 d16:	d8 01       	movw	r26, r16
 d18:	16 96       	adiw	r26, 0x06	; 6
 d1a:	8d 91       	ld	r24, X+
 d1c:	9c 91       	ld	r25, X
 d1e:	17 97       	sbiw	r26, 0x07	; 7
 d20:	01 96       	adiw	r24, 0x01	; 1
 d22:	17 96       	adiw	r26, 0x07	; 7
 d24:	9c 93       	st	X, r25
 d26:	8e 93       	st	-X, r24
 d28:	16 97       	sbiw	r26, 0x06	; 6
 d2a:	ce 01       	movw	r24, r28
 d2c:	df 91       	pop	r29
 d2e:	cf 91       	pop	r28
 d30:	1f 91       	pop	r17
 d32:	0f 91       	pop	r16
 d34:	08 95       	ret

00000d36 <__ultoa_invert>:
 d36:	fa 01       	movw	r30, r20
 d38:	aa 27       	eor	r26, r26
 d3a:	28 30       	cpi	r18, 0x08	; 8
 d3c:	51 f1       	breq	.+84     	; 0xd92 <__ultoa_invert+0x5c>
 d3e:	20 31       	cpi	r18, 0x10	; 16
 d40:	81 f1       	breq	.+96     	; 0xda2 <__ultoa_invert+0x6c>
 d42:	e8 94       	clt
 d44:	6f 93       	push	r22
 d46:	6e 7f       	andi	r22, 0xFE	; 254
 d48:	6e 5f       	subi	r22, 0xFE	; 254
 d4a:	7f 4f       	sbci	r23, 0xFF	; 255
 d4c:	8f 4f       	sbci	r24, 0xFF	; 255
 d4e:	9f 4f       	sbci	r25, 0xFF	; 255
 d50:	af 4f       	sbci	r26, 0xFF	; 255
 d52:	b1 e0       	ldi	r27, 0x01	; 1
 d54:	3e d0       	rcall	.+124    	; 0xdd2 <__ultoa_invert+0x9c>
 d56:	b4 e0       	ldi	r27, 0x04	; 4
 d58:	3c d0       	rcall	.+120    	; 0xdd2 <__ultoa_invert+0x9c>
 d5a:	67 0f       	add	r22, r23
 d5c:	78 1f       	adc	r23, r24
 d5e:	89 1f       	adc	r24, r25
 d60:	9a 1f       	adc	r25, r26
 d62:	a1 1d       	adc	r26, r1
 d64:	68 0f       	add	r22, r24
 d66:	79 1f       	adc	r23, r25
 d68:	8a 1f       	adc	r24, r26
 d6a:	91 1d       	adc	r25, r1
 d6c:	a1 1d       	adc	r26, r1
 d6e:	6a 0f       	add	r22, r26
 d70:	71 1d       	adc	r23, r1
 d72:	81 1d       	adc	r24, r1
 d74:	91 1d       	adc	r25, r1
 d76:	a1 1d       	adc	r26, r1
 d78:	20 d0       	rcall	.+64     	; 0xdba <__ultoa_invert+0x84>
 d7a:	09 f4       	brne	.+2      	; 0xd7e <__ultoa_invert+0x48>
 d7c:	68 94       	set
 d7e:	3f 91       	pop	r19
 d80:	2a e0       	ldi	r18, 0x0A	; 10
 d82:	26 9f       	mul	r18, r22
 d84:	11 24       	eor	r1, r1
 d86:	30 19       	sub	r19, r0
 d88:	30 5d       	subi	r19, 0xD0	; 208
 d8a:	31 93       	st	Z+, r19
 d8c:	de f6       	brtc	.-74     	; 0xd44 <__ultoa_invert+0xe>
 d8e:	cf 01       	movw	r24, r30
 d90:	08 95       	ret
 d92:	46 2f       	mov	r20, r22
 d94:	47 70       	andi	r20, 0x07	; 7
 d96:	40 5d       	subi	r20, 0xD0	; 208
 d98:	41 93       	st	Z+, r20
 d9a:	b3 e0       	ldi	r27, 0x03	; 3
 d9c:	0f d0       	rcall	.+30     	; 0xdbc <__ultoa_invert+0x86>
 d9e:	c9 f7       	brne	.-14     	; 0xd92 <__ultoa_invert+0x5c>
 da0:	f6 cf       	rjmp	.-20     	; 0xd8e <__ultoa_invert+0x58>
 da2:	46 2f       	mov	r20, r22
 da4:	4f 70       	andi	r20, 0x0F	; 15
 da6:	40 5d       	subi	r20, 0xD0	; 208
 da8:	4a 33       	cpi	r20, 0x3A	; 58
 daa:	18 f0       	brcs	.+6      	; 0xdb2 <__ultoa_invert+0x7c>
 dac:	49 5d       	subi	r20, 0xD9	; 217
 dae:	31 fd       	sbrc	r19, 1
 db0:	40 52       	subi	r20, 0x20	; 32
 db2:	41 93       	st	Z+, r20
 db4:	02 d0       	rcall	.+4      	; 0xdba <__ultoa_invert+0x84>
 db6:	a9 f7       	brne	.-22     	; 0xda2 <__ultoa_invert+0x6c>
 db8:	ea cf       	rjmp	.-44     	; 0xd8e <__ultoa_invert+0x58>
 dba:	b4 e0       	ldi	r27, 0x04	; 4
 dbc:	a6 95       	lsr	r26
 dbe:	97 95       	ror	r25
 dc0:	87 95       	ror	r24
 dc2:	77 95       	ror	r23
 dc4:	67 95       	ror	r22
 dc6:	ba 95       	dec	r27
 dc8:	c9 f7       	brne	.-14     	; 0xdbc <__ultoa_invert+0x86>
 dca:	00 97       	sbiw	r24, 0x00	; 0
 dcc:	61 05       	cpc	r22, r1
 dce:	71 05       	cpc	r23, r1
 dd0:	08 95       	ret
 dd2:	9b 01       	movw	r18, r22
 dd4:	ac 01       	movw	r20, r24
 dd6:	0a 2e       	mov	r0, r26
 dd8:	06 94       	lsr	r0
 dda:	57 95       	ror	r21
 ddc:	47 95       	ror	r20
 dde:	37 95       	ror	r19
 de0:	27 95       	ror	r18
 de2:	ba 95       	dec	r27
 de4:	c9 f7       	brne	.-14     	; 0xdd8 <__ultoa_invert+0xa2>
 de6:	62 0f       	add	r22, r18
 de8:	73 1f       	adc	r23, r19
 dea:	84 1f       	adc	r24, r20
 dec:	95 1f       	adc	r25, r21
 dee:	a0 1d       	adc	r26, r0
 df0:	08 95       	ret

00000df2 <_exit>:
 df2:	f8 94       	cli

00000df4 <__stop_program>:
 df4:	ff cf       	rjmp	.-2      	; 0xdf4 <__stop_program>
